让我为您翻译这段关于 Minecraft 模组开发中 Block States 的内容： 让我们来讨论方块状态.
我们有一个长达 11 小时的 Minecraft 模组开发课程，涵盖了从基础知识到方块实体和自定义生物的所有内容.
在本教程中，我们将讨论方块状态和方块状态属性.
 这是一个较为理论性的教程，虽然我们也会实际实现一些功能.
理解方块和方块状态之间的区别，以及物品和物品堆之间的区别，对模组开发来说非常重要.
在本教程中，我们首先要处理方块状态.
 我们将在 block.custom 包中创建一个新的 Java 类，命名为 BismuthLampBlock，它继承自 net.minecraft.world.level.block 包中的 Block 类.
我想实现的功能是，当这个灯方块放置在世界中时，可以通过右键点击来改变其纹理并使其发光――开启时发光，关闭时不发光.
 对于熟悉 Java 的人来说，可能会想到使用 public Boolean 类型的变量来实现这个功能.
但是这种方法行不通，因为方块类（或物品类）是单例的.
这意味着什么呢？ 以魔法方块为例，我们在 mod_blocks 类中只创建了一个魔法方块对象，但可以在世界中放置无数个魔法方块实例.
同样的概念也适用于物品，比如钻石剑――所有的钻石剑都来自同一个 SwordItem 类，但每个剑都是独立的物品堆.
 因此，我们需要使用 Boolean 属性来实现这个功能，这个属性由游戏自动处理，并且能够自动在服务器和客户端之间同步，这一点非常重要.
我们需要声明一个 public static final 的 Boolean 属性.
 （注：保留了专有名词如 Java、Boolean、Block、BismuthLampBlock 等的原文形式） 让我将这段文本翻译成简体中文： 每当你向方块添加一个属性时，你需要调用 create block state definition 方法，然后获取 Builder 并调用 add 方法，传入 clicked 属性，这一步极其重要.
在我们的 bismi 灯的例子中，我们实际上可以定义一个合适的默认状态，所以我们要调用 this.registerDefaultState，传入 this.defaultBlockState，执行 setValue，将 clicked 的值设置为 false.
这样，每次我们放置一个 bismi 方块时，都能确保它被设置为 false 状态，基本上就是在说"嘿，我们不希望它在放置时就处于开启状态".
然而，我们要如何改变这个状态呢？我们可以通过重写 use 方法来实现这一点，在这种情况下，我们首先要返回一个成功的交互结果，然后在这里我们要判断 if level.
 注：保留了专有名词如"clicked"、"Builder"、"this"、"registerDefaultState"、"defaultBlockState"、"setValue"、"false"、"bismi"等技术术语的原文形式，以保持代码相关内容的准确性.
 让我为您翻译这段文本： 这里的 client side 是 false，我想再次强调这个感叹号，我们在这里进行取反操作.
也就是说，我们希望在服务器端执行.
我们要做的是声明一个布尔类型的 current state（当前状态），我们将通过查看这里的 block state（方块状态）来获取它当前所处的状态.
这是已放置的方块实例的状态.
state.get value of clicked 表示我们刚刚右键点击的方块的状态，所以我们基本上是要获取那个特定的布尔值，也就是它是开启还是关闭的状态，然后我们要使用 level.
 注：保留了代码相关的专有名词如 client side、block state、state.get value of clicked 等的原文形式，以保持其技术含义的准确性.
 让我为您翻译这段关于《Immersive Translate》中的游戏开发内容： 在特定位置设置方块并更新状态时，传入带有新值的状态，设置点击值，然后我们只需对当前状态取反.
为什么要这样做？这实际上就是一个简单的开关行为 ―― 打开和关闭.
如果当前状态是开启，那就关闭；如果是关闭，就开启.
这就是这段代码的全部作用.
在这个类中，我只想把这个灯作为示例，让你了解如何添加布尔属性以及它是如何工作的.
 按住 Control 键并点击这个，我们可以看到 Property 类.
按 Control+H，我们还能看到 Properties 以及枚举属性.
理论上，你也可以创建自己的自定义属性.
强烈建议点击方块并按 Control+H，这样你就能看到我们之前看到的所有原版方块，其中一些具有不同的属性.
 例如，台阶方块有一个 water_locked（防水）的布尔属性，还有一个 slab_type（台阶类型）的枚举属性.
TNT 方块有一个 unstable（不稳定）属性，门方块有一个表示是否打开的枚举属性，还有铰链属性表示双方块的哪一侧等等.
强烈建议你去研究这些原版内容，这对你会很有帮助.
 完成这些后，我们现在可以转到 ModBlocks 类来注册自定义灯.
我们将创建一个类型为 Block 的 public static final DeferredBlock，命名为 bismor_lamp，使用 registerBlock 方法注册，第二个参数是新的 BismorLampBlock 实例.
虽然我们只创建一次，但可以放置上千个不同的灯方块，它们都会独立运作.
这将具有强度为 2 的方块行为属性，需要正确的工具才能掉落，还会有一个光照等级，需要一个接收状态并返回整数的函数（0 表示无光照，15 表示最高光照等级）.
我们只需获取 bismor_lamp 方块的 click 属性值即可.
 让我为您翻译这段关于 Minecraft 模组开发的内容： 如果点击属性为 true，我们就将亮度设为 15，否则设为 0.
这意味着当点击状态为 true 时，方块会像萤石一样发出 15 级的光照.
这就完成了我们的基础照明灯.
 接下来，我们可以将其添加到创造模式物品栏中.
关于这个方块，有两个方面需要处理： 首先是战利品表，它会直接掉落方块本身.
我们这里使用数据生成（datagen），如果您还没有添加数据生成功能，那么您需要先添加它.
 其次是方块状态和方块模型 JSON 文件.
在这种情况下，我们可以采用几种方式.
我将向您展示我编写的自定义方法.
这很有趣，因为我们有不同的属性 - 如果查看其他方块状态，您会看到不同类型指向不同的模型.
 在我们的例子中，当点击状态为 true 时，我希望指向一个不同的模型，该模型又指向与关闭状态不同的纹理.
实现这一点有两种方式： 1. 如果只有一个照明灯方块，可以手动编写 JSON 文件 2. 如果有 20 个功能相似的照明灯方块（比如对应不同羊毛颜色），则最好使用自定义方法 我准备了一个自定义照明灯的实现方法.
这里我们为所有状态创建了一个变体构建器：当状态为 true 时，使用指向"bismuth_lamp_on"纹理的立方体模型；当状态为 false 时，使用"bismuth_lamp_off"模型.
 我们还需要添加翻译文件和纹理.
运行数据生成器后，它会生成方块状态 JSON 文件和战利品表.
 在游戏中测试时，您可以看到 bismuth 灯已成功添加到游戏中.
右键点击可以开关，在夜晚可以看到它确实能发光.
虽然所有这些都是来自同一个方块类，但它们都是相互独立的，可以独立控制开关状态.
 这就是自定义方块状态和方块状态属性的全部内容.
下一个教程我们将讨论新的组件系统和物品堆