让我为您翻译这段关于 Minecraft 模组开发的文本： 看看这个闪亮的效果！让我们为 Minecraft 1.21 添加自定义装饰材料和装饰图案.
完整的 Minecraft 模组开发课程（超过 11 小时的内容）已在下方提供，涵盖了从基础知识到方块实体和自定义生物的所有内容.
 在本教程中，我们将为我们的 Minecraft 模组添加自定义装甲装饰，包括材料和图案.
对此，数据生成（data gen）非常重要，因为我们需要生成两个 JSON 文件.
当然，理论上您也可以手动创建这些 JSON 文件.
所有代码和所需资源都在描述中的 GitHub 仓库链接中提供，包括所需的纹理文件.
 首先，在 tutorial mod 包中，我们要创建一个名为 trim 的新包，并在其中创建两个新的 Java 类：mod trim materials 类和 mod trim pattern 类.
这两个类的内容会被复制过来，整体来说相当直观.
只要您有 bismo 物品，就不会出现错误.
 让我们从底部的辅助方法 register 开始.
这个方法用于正确注册我们的装饰材料.
我们需要为其指定名称、关联物品、物品模型索引（稍后详述）、可翻译组件（用于描述或命名），以及样式.
最后还有一个空映射，用于确定这种材料可以应用于哪些类型的装甲（空映射表示可用于所有装甲）.
 [由于字符限制，翻译到此结束.
如需继续翻译剩余内容，请告诉我.
] 让我来翻译这段文本： 注册方法，这里的名称将是 ccore armorcore trimore smithing template（有点复杂），这是一个供应商，这是非常重要的锻造模板物品.
创建护甲纹饰模板，传入一个来自命名空间和路径的资源位置，传入教程模组.
 让我为您翻译这段关于《Immersive Translate》中的装甲纹饰系统相关内容： 这里需要 modid 和名称 c，非常重要的是，我们在这里给出的资源位置必须与资源键的位置完全匹配.
让我们逐步了解这个物品所需的所有内容：首先要将其添加到创造模式标签页中，这是我经常容易忘记的.
物品模型是基础物品模型，所以这里不需要特别复杂的设置，只需调用基本物品方法即可.
 接下来在 assets 目录中还有一些重要的工作要做.
首先是翻译，物品的翻译很直接，但我们还需要两个额外的翻译：纹饰图案和纹饰材料的翻译.
将这些添加到底部，可以看到格式是"trimore_pattern"，然后是你的 mod ID，再加上纹饰图案的名称（显然是从这里的名称获取的）.
材料的翻译也是同样的方式.
这样做的目的是当你将鼠标悬停在带纹饰的装甲上时，能够正确显示名称.
 关于纹理，第一个比较简单，就是装甲纹饰锻造模板，直接放在 item 文件夹中即可.
但当我们添加纹饰时，需要颜色和图案，这两个要放在特定的文件夹中.
请特别注意以下路径，这非常重要： 在 textures 文件夹中，创建名为"trims"的新目录（注意末尾有 s），在其中创建"color_palettes"目录（注意是美式拼写，pallets 用两个 t）.
建议查看 Github 仓库确认正确拼写.
在 trims 文件夹中还要创建"models/armor"目录（同样使用美式拼写）.
 在 color_palettes 中添加 bismo.png，在 models/armor 中添加 c 和 cmore_leggings.png 文件.
调色板基本上决定了使用特定纹饰材料时纹饰的颜色变化，而装甲模型则决定了实际显示在装甲上的图案.
 你可以在外部库中找到 Neo Forge，在其 resources（即 client）中查看示例.
在 assets/minecraft/textures/trims 中可以看到基础调色板，比如钻石的调色板通常是从明亮到深色过渡.
当然，你也可以选择不同的方式处理.
 最后一个重要步骤是在 assets 文件夹中创建 minecraft/atlases 目录（注意 Atlas 的复数形式），确保路径是 resources/assets/minecraft/atlases，并在其中放入 armor_trim.json 文件（可在下方获取）.
 让我为您翻译这段关于 Minecraft 模组开发的技术说明： 这是一个 JSON 结构，格式必须严格正确，否则将无法正常工作.
这里展示的是调色板部分，用于自定义装饰模型.
在底部可以看到我们添加了"tutorial mod trims models armor"以及护腿部分，这些设置非常重要，如果缺少可能会导致显示问题.
 在底部有 Bismuth（铋）的名称，然后是"tutorial mode trims color petts bismuth"，这实际上指向了我们刚刚添加的 PGS 文件.
从命名方案可以清楚地看出这一点，这里的名称显然对应材质内部的名称.
对于装饰部分，我们基本上不需要名称，它会自动处理.
 完成这些后，让我们关闭这些窗口，考虑下一步.
目前这些装饰还未被使用，因为我们还没有为其生成数据.
为此，我们需要创建一个新的数据生成类.
在 data gen 包中，右键新建一个 Java 类，命名为"mod data pack provider"，这个类将继承自 DataPackBuiltinEntriesProvider.
 我们需要创建匹配父类的构造函数，确保选择正确的构造函数 - 如果我没记错的话，应该选择底部那个包含 CompletableFuture和 modId 集合的构造函数.
接下来，我们将移除 RegistrySetBuilder 和 Set，这些稍后会被添加回来.
modIds 的设置非常简单，只需要使用 set 即可.
 让我为您翻译这段关于 Minecraft 模组开发的教程文本： 我们将创建一个教程模组.
首先，将其设置为一个字段 - 这将是一个 public static final 的 registry set builder，我们把它命名为 BUILDER（全大写）.
创建一个新的 registry set builder，我们要为 Registries 添加这个.
这将是 trim material（装饰材料），在这里我们调用 `mod_trim_materials::bootstrap`，然后再次调用 add 方法，这次是针对 Registries trim pattern（装饰图案），在这种情况下，您猜对了，是 `mod_trim_patterns::bootstrap`.
现在，我们不用在这里使用红色的部分，而是可以传入 BUILDER，这样就可以了.
完成这些后，我们现在可以将其添加到数据生成器类中，这将是 `generator.addProvider(event)`.
 注：保留了代码相关的专有名词如 registry set builder、bootstrap 等术语的原文，以保持技术准确性.
 这次包含服务器非常重要的新模组数据包，模组数据包提供者传入包输出以及查找提供者.
完成这些后，我们基本上就能够生成 JSON 文件了.
我们几乎拥有所需的一切，但还有一些重要的内容，那就是标签.
就像我们之前制作的可调整的自定义盔甲一样，我们必须确保我们的材料和模板能够被正确放置到锻造台中.
 为此，我们要声明 this.tag，然后指定 item_tags.trimmer_materials，在这里我们将添加 mod_items.bismuth_ingot.
接着，我们还要添加另一个 this.tag，这次是 item_tags.trimmer_templates，在这里我们将添加 mod_items.smithing_template.
 注：保留了技术术语如"JSON"、"tag"、"mod_items"等不进行翻译，以保持专业性和准确性.
这段翻译保持了原文的技术含义，同时使其对中文读者更容易理解.
 让我来翻译这段文本： 获取后我们继续，但还没有完全结束，因为我们还需要将其添加到配方中.
这是一个非常奇特的情况，对于 Custom Trim（自定义装饰）模式来说，这是最奇怪的事情之一 ―― 你需要在你的 mod 配方提供器中实际添加 trim smithing（装饰锻造），在这里传入配方输出，传入 mod items.smithing template（模组物品.锻造模板）.
然后我们要用 resource location（资源位置）来指定命名空间和路径 tutorial mod.
 这里是对这段游戏开发教程内容的中文翻译： 模组 ID 和这里的名称将会是 T，请注意，这里的资源位置必须与我们给予物品的资源位置相匹配.
所以这个位置要与我们在 trim material（装饰材料）或者说 trim patterns（装饰图案）类中的位置保持一致.
当所有这些都匹配后，我们基本就可以开始了.
我们可以运行数据生成器，然后我会向你展示生成的 JSON 文件，主要是装饰图案和装饰材料的相关文件.
理论上你也可以手动制作这些文件，但我认为使用生成器会更简单.
这些类非常简单，不会很难，就像我说的，添加新的内容只需要另一个注册调用和一个新的资源键，没什么复杂的.
 在数据教程模式中，你可以看到装饰材料和装饰图案.
让我们关闭这边所有复杂的内容，来看看具体的文件.
你可以看到这两个 JSON 文件其实并不复杂，它们相当直观，没什么特别的.
这些基本上就是我们自定义装饰材料和装饰图案所需的两个主要 JSON 文件.
一旦我们完成这些，包括标签和配方，我们就可以进入游戏看看效果了.
 回到 Minecraft 中，让我们先看看把铋放在这里，配合已有的模板.
你看，这效果太棒了！我特别喜欢铋的这些颜色，它们太酷了.
当然，铋的颜色在铋装饰上可能不是很协调，但如果选择其他的话，效果就会很好.
虽然还不是最理想的，但也算可以了.
这个自定义装饰也能正常工作，让我们把所有的都拿出来看看，再配上蓝色的，最后是铋，因为我觉得这个效果实在是太棒了.
 看看这个图案，我真的很喜欢这个设计，很酷.
这个也看起来很棒，当然红石的这个可能是我最喜欢的，不过这个也很酷.
所有的都非常棒，我也说不好最喜欢哪个.
这就是如何给 Minecraft 添加自定义护甲装饰图案和装饰材料.
像往常一样，所有代码都在下方链接中.
这就是本次教程的全部内容，下次视频我们将讨论物品属性，希望到时候能见到你们