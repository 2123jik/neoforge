让我们来看看物品属性.
在下方有 121 个 Minecraft 模组开发课程，包含超过 11 小时的内容，涵盖从基础知识到方块实体和自定义生物的所有内容.
好的，让我再说一遍，在本教程中，我们将学习物品属性.
这些属性非常有趣，从最高层面来说，它们可以根据各种不同的条件来改变物品的纹理，比如根据你所在的生物群系，或者是基于物品堆叠的一些数据组件等.
 我们这里有一个凿子物品，我们要实现的是：当你使用过这个物品一次后，我想要简单地将纹理改变成略微不同的样子，基本上就是让纹理变亮一些.
这个例子可能不是那么令人兴奋，或者说在实际的模组中不太容易直接应用，但这只是为了演示目的.
你会发现整体来说这个过程相当直接.
 首先，我们要在 util 包中创建一个新的 Java 类，叫做 ModItemProperties 类.
当然你也可以把它放在其他包中，比如 client 包或其他地方，但我个人喜欢把它放在 util 包中，这样就可以了.
把它放在 item 包中也可以，但这就是在纠结细节了.
我们将创建一个 public static void addCustomItemProperties 方法，这个方法将调用 ItemProperties 类.
 让我为这段文本提供中文翻译： 注册方法需要传入一个物品参数，这个物品就是我们想要添加物品属性的目标.
在这个例子中是 Chisel（凿子）工具.
接着，我们要通过命名空间和路径创建一个资源位置，这基本上就是我们属性的名称，在这里我们将其命名为"used".
最后一个参数，也就是第三个参数，我们可以开始输入"stack"，你会看到它会提示我们一个物品属性函数，我们只需按 Tab 键自动完成即可.
在这里，我们实际上需要返回一个浮点数，当然我们可以直接返回"1F"，但显然现在我们遇到了一个问题，因为这样它总是会返回固定值，这并不是我们想要的.
我们当然希望根据某些条件来改变这个"used"属性的值，在这种情况下我们要使用 stack.
 让我为您翻译这段关于 Minecraft 模组开发的技术文档内容： 我们要获取 mod 数据组件的坐标组件.
如果该组件不为空，则返回 1；如果为空（即没有数据组件），则返回 0.
这样做的效果是，当我们查看凿子物品时，我们可以在右键点击特定方块时更改或添加数据组件.
 这个机制非常有趣，因为您不仅可以访问游戏世界（level），还能访问持有该物品的实体.
这带来了许多可能性：您可以检查实体的生命值并据此改变属性，也可以根据实体在世界中的位置来改变属性等.
说实话，我很惊讶没有看到更多的模组使用这个功能.
 不过这里有一个限制：我们需要手动创建物品模型的 JSON 文件，因为这无法通过数据生成来实现.
在我们的例子中，我们需要在数据生成器中注释掉基础物品，并删除生成的物品模型 JSON 文件，因为保留它可能会导致问题.
 接下来，我们要创建正确的目录结构：在 assets/tutorialmod 中创建 models/item 目录，并添加凿子的 JSON 文件.
我们需要重命名一些内容：将其改为"chisel_used"和"chisel_unused".
在普通的 JSON 文件中，我们要添加一个 overrides 列表，包含 predicate 对象.
当 tutorialmod:used 为 1 时，我们希望指向不同的模型：tutorialmod:item/chisel_used.
 这个系统在原版 Minecraft 中被广泛使用，比如弓、时钟等物品都使用了这种属性系统来改变纹理.
建议查看 ItemProperties 类来了解更多示例.
最后一步是在 TutorialMod 类的 onClientSetup 事件中设置 ModItemProperties.
 通过添加自定义物品属性，我们现在已经拥有了所需的一切，让我们进入游戏看看是否正常运行.
回到 Minecraft 游戏中，我们可以看到有一些凿子工具.
如果我右键点击一个可以雕凿的方块，你会发现方块的纹理发生了变化.
这种变化虽然很微妙，但你绝对能看出这是两种不同的纹理.
如果我再拿另一个凿子继续雕凿，你会看到纹理又一次发生了改变，这简直太神奇了！就像我说的，这是一个非常微妙的效果，但确实很酷，我相信你可以用物品属性制作出一些非常棒的东西.
 好了，这就是本教程的全部内容.
在下一个视频中，我们将继续使用物品属性来添加一把自定义弓