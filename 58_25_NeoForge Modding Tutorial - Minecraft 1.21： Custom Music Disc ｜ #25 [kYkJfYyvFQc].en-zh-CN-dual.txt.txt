让我为这段文本提供中文翻译： 聆听那美妙的音乐声，让我们为《我的世界》1.21 版本添加一个自定义音乐唱片.
完整的《我的世界》模组开发课程链接在下方，包含超过 11 小时的内容，涵盖从基础知识到方块实体和生物的所有内容.
好的，我们继续深入，听好了，我们要制作一个自定义音乐唱片.
我会用我那并不存在的歌唱技能来，呃，你知道的，来个开场白，为什么不呢？没错，就是自定义音乐唱片.
与之前的版本相比，音乐唱片的制作方式有些变化.
制作自定义音乐唱片，我们仍然需要在这里添加自定义声音，因为这本质上还是声音文件，但我们现在还需要一个唱片盒歌曲（jukebox song）.
首先，在我们的 mod 声音类中，我们需要创建一个私有静态的 ResourceKey，类型是 JukeboxSong.
接下来，我们要创建一个名为 createSong 的方法，它接收一个字符串名称参数，返回 ResourceKey.
创建注册表 Registries.JUKEBOX_SONG，然后传入命名空间和路径，使用 tutorial_mod.
 让我为您翻译这段关于 Minecraft 模组开发的文本： 首先需要设置模组 ID 和名称来创建音乐.
这里我们需要两个关键组件：第一个是一个 public static final 类型的 sound event 供应器，用于创建"bar brawl"音乐 - 我很喜欢这首曲子，我们将其命名为"barcor bar uncore bra".
 接下来是第二个 public static final 组件，这次是一个 resource key 类型.
您能猜到是什么类型吗？没错，就是 jukebox song（唱片机音乐）类型.
我们将使用 create song 方法创建这个 barcor brawl uncore key.
 完成这些后，我们可以添加物品了.
这个物品实际上是一个唱片物品（record item）.
在我们的 mod items 类中，我们要声明第三个 public static final Item 类型的物品，命名为 barcor bore musicor disk，使用 items deferred register 方法注册.
这里看起来有点复杂，我们需要创建一个新的 item 供应器，使用 new Item Properties，并调用 Jukebox playable 方法，传入 mod sounds 参数.
 让我将这段文本翻译为简体中文： 然后是滚动条按键，接着我们还想要将这两个堆栈合二为一，这样就完成了.
当然，这里应该是 register 方法而不是 register item 方法，我不知道为什么它突然变成了 register item 方法，但就是这样.
我们当然要这样做，完成这些后，首先让我们把它添加到创造模式标签页中，因为它是一个普通物品.
我们还可以为它添加数据生成，这将是这里的 item model provider（物品模型提供器）.
这是一个基础物品，所以没有太复杂的内容.
我们还需要在其他地方使用它吗？是的，就是 Barb 音乐唱片本身.
代码方面我们都没问题，但是我们需要通过数据来定义唱片机歌曲.
理论上，我们也可以通过制作自定义数据生成来实现，也就是使用这里的 data pack provider（数据包提供器）并创建一个自定义类.
通常来说，就像我之前说过的 trim（装饰物）一样，有时使用数据生成是有意义的，有时则不然.
当然，你可以用数据生成来做这个，但在这种情况下，我们实际上要用基础的自定义方式来展示，不过两种方式都可以.
所以我们要做的是，进入 resources 文件夹，在里面重新创建一个叫 Data 的目录，在其中创建另一个叫 tutorial mod 的新目录，然后在里面创建另一个目录，我们将其命名为 Juke boxor song，最后在其中创建一个新文件，叫做 barb.
 让我帮你翻译这段文本： 这个 Json 的内容看起来是这样的，其实并不是很复杂.
我们将会有一个比较器（comparator）、比较器输出（comparator output）和未精炼输出（uncore output）.
当然，所有这些代码都可以在下方找到.
我还有一个描述，这个描述实际上是一个对象 translate，而这个 translate 将会是一个物品（item）.
这是关于 tutorial mod doore brawl mic uncore disk 的内容.
 注：我保留了一些专业术语和专有名词的原文，如 Json、comparator、tutorial mod 等，以保持其技术含义的准确性.
这样的翻译既保持了原文的技术性，又让中文读者能够理解文本的整体含义.
 让我将这段关于 Minecraft 模组开发的文本翻译为简体中文： 首先需要定义描述文本，然后我们要定义长度（以秒为单位），我已经将其设置为 1620 秒.
与此相关的声音事件将是"tutorial_mod:bar_brawl".
理论上，这整个过程也可以像 mod 材质和 mod 图案那样，使用注册方法和引导上下文来创建.
但有时候你不必这样做，比如只添加一首歌时，可以直接写出来.
如果有多个音乐，那么使用数据生成可能更有意义.
 无论如何，我们还需要准备以下资源：翻译文件、材质和声音文件.
翻译文件中包含了酒馆争斗音乐唱片的名称，以及描述信息（通常包含歌曲作者和歌名）.
这里我还添加了 CC0 标记，表明这是以知识共享零许可协议发布的作品，可以随意使用.
 接着是材质文件，这是放在 items 目录下的物品材质，就是"bar_brawl_music_disc"的材质文件.
然后是声音文件，就是"bar_brawl.ogg".
这必须是一个合法的 OGG 文件，而且非常重要的是必须是单声道的.
不能简单地将 MP3 文件重命名，必须正确转换成单声道 OGG 格式，否则声音会在整个服务器上产生问题.
 最后一步是在 sounds.json 中添加配置.
我们需要在底部添加"bar_brawl"对象，包含 sounds 列表，其中指定名称为"tutorial_mod:bar_brawl"，并将 stream 设为 true，因为这是一个需要持续播放的音频流.
 完成这些后，最新的变化是在数据包中，你需要在 jukebox_songs 中定义歌曲名称.
JSON 文件的名称必须与资源键匹配.
所有内容都叫"bar_brawl"只是巧合，它们不一定要使用相同的名称.
必须匹配的是：声音事件名称要与这里给定的名称相匹配，这是声音事件名称，那是 OGG 文件名称，这是点唱机歌曲键名，它显然与这个名称匹配.
 让我们运行数据生成器来生成自定义酒馆争斗音乐唱片的物品模型 JSON 文件.
在游戏中，你可以看到酒馆争斗音乐唱片已成功添加到游戏中.
当放入点唱机时，由于这是单声道 OGG 文件，所以当你逐渐远离时，声音会越来越小，直到听不见为止.
 最后提醒一下，很容易出现拼写错误，请仔细检查所有地方的拼写是否正确，特别是 JSON 文件是否在正确的文件夹中.
所有代码都可以在下方找到.
下一个教程我们将讨论自定义效果