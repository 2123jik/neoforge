让我们将这段文本翻译为简体中文： 让我们在大地上种植我们的树木，并为《我的世界》1.21 版本添加自定义树木生成功能.
《我的世界》模组开发课程现已开放，包含超过 11 小时的内容，涵盖从基础知识到方块实体和自定义生物的所有内容.
好的，我们再次回来，在本教程中，我们将为我们的《我的世界》模组添加自定义树木生成功能.
上次我们当然已经添加了自定义树木，包括所有我们需要添加的不同方块，当然还有树木生长器和配置特性.
如果你还没有这些内容，那么你至少需要这里的配置特性.
像往常一样，本教程和之前所有教程的代码都在描述中提供了链接，你也可以在那里进行核对.
接下来，我们将从 mod 放置特性开始，我们需要一个类型为 placed feature 的 public static final resource key，这将是 bloodwood_uncore_placed_key，等于 registeredKey 方法，我们将在这里将其命名为 bloodwood_uncore_placed，然后我们将看看这个放置特性会是什么样子，这将会很有趣.
在这种情况下，注册调用当然是传入上下文和 bloodwood_placed_key，然后是 configured_features.
 让我们将这句话翻译为中文： 获取或抛出我们期望的模块配置特性.
 这个翻译保持了原文的技术含义，同时使其在中文语境下更容易理解.
这里的"mod"被翻译为"模块"，因为在软件开发上下文中，mod 通常指代 module（模块）.
"configured features" 被翻译为"配置特性"，这是在软件工程中常见的表述方式.
 为确保翻译的准确性和专业性，我还可以提供一些额外的上下文说明： - "get or throw" 是编程中常见的错误处理模式，表示要么获取值，要么抛出异常 - "configured features" 指的是通过配置启用或设置的功能特性 - 整句话描述的是一个配置管理相关的操作 这样的翻译既保持了技术准确性，又符合中文的表达习惯.
 让我为您翻译这段关于《Immersive Translate》中的 Minecraft 模组开发内容： 这里有一个 bloodwood 密钥，在第一个右括号后，我们要处理植被放置，也就是树木放置.
这里很有趣，我们将使用 placement utils 中的 count extra 方法，设置参数为 3、0.1 和 0.2.
稍后我会解释这些数字的含义.
重要的是，第二个参数我们需要传入 bloodwood 树苗的 doget 方法.
 从后往前看，我们首先要处理 bloodwood 树苗.
理论上我们可以只使用 count extra，但千万不要这样做.
如果这样做，自定义树木会相互重叠，并且会在奇怪的随机位置生成.
在这里添加树苗基本上限制了自定义树木可以生成的位置，确保它们只能在玩家可以放置 bloodwood 树苗的地方生成，也就是泥土和草方块上.
 关于 count extra 参数，这表示我们希望生成的树木数量，同时有 10%的概率额外生成两棵树.
建议多尝试调整这些数值.
您也可以查看 vegetation placements 方法，了解不同树木对应的参数.
 特别重要的是关于概率的计算：这个概率计算方式很特别，它会用 1 除以这个概率值，并且结果必须是一个自然数，否则将无法工作.
比如 0.2 和 0.1 都可以，但 0.3 就不行，因为 1/0.3 不是整数.
这个设计确实有点奇怪，但必须遵守这个规则.
 完成这些后，我们就完成了 placed feature 的设置.
接下来是生物群系修改器的配置，这部分相对简单.
我们需要设置资源密钥，将其命名为"add_tree_bloodwood"，并指定要在哪些生物群系中生成，比如平原和热带草原.
 最后，确保将生成步骤设置为"vegetal_decoration"而不是地下生成，这点极其重要.
这就是树木生成的所有步骤.
您可以在 vegetation placements 类中查看更多关于植被放置的细节，包括所有树木的生成方式.
原版代码是最好的参考资料.
 测试时，我们可以生成一个新的世界，在平原和热带草原生物群系中查看效果.
这些设置在已有的世界的新生成区块中也能生效，不过我个人更喜欢使用新世界测试.
正如您所见，在热带草原生物群系中，我们的巨大 bloodwood 树木已经生成，它们的分叉树干看起来非常棒.
 这就是自定义树木生成的教程.
下一个教程我们将讨论如何在自定义方块上生成树木