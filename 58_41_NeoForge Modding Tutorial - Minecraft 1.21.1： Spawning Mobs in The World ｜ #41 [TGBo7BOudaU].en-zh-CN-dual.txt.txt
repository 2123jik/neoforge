让我将这段文本翻译为简体中文： 让我们更深入地探讨如何在 Minecraft 世界中生成实体.
在下方链接的 121 个模组开发教程中，涵盖了更多高级主题，包括可交互的实体、自定义实体装备，甚至自定义实体物品栏等众多精彩内容.
好的，让我们回到正题，在本教程中，我们将介绍如何在游戏世界中生成基础实体，你会发现这比想象中更直接简单.
要实现这一点，你显然需要一个自定义实体和自定义世界生成，请记住这一点，因为我们将创建一个自定义生物群系修改器.
在教程结束时，当我们生成了所需的 JSON 文件后，我也会展示这个 JSON 文件，这样如果你没有世界生成或数据生成功能，你也可以手动创建它.
对于模组实体本身，我们首先需要在 events 包的 mod event bus events 中完成一件事，因为我们需要在这里注册生成位置，这一点非常重要，否则你的自定义生物可能会直接生成在半空中并摔死，这通常不是你想要的结果.
所以这里我们要创建一个 public static void 方法，我们将其命名为 registerSpawnPlacements，这是带有 event 参数的 registerSpawnPlacements 事件，当然和往常一样，我们需要添加 @SubscribeEvent 注解，这一点极其重要，否则将无法正常工作.
它必须是 public static void 的，并且需要将 registerSpawnPlacementEvents 作为参数，在这里我们将调用 event.
 让我帮你翻译这段文本.
由于这是一段涉及编程概念的文本，我会保留专业术语的原文： 在 register 中我们要说明 mod entities.
geo.
获取（getet）第二个参数将是 onore ground，在这种情况下，我们实际上需要说明 spawn placement types（生成放置类型）.
 为了确保翻译的完整性和专业性，我补充说明： - 保留了技术术语如 "register"、"mod entities"、"spawn placement types" 等 - 对于可能的拼写错误（如 "getet"）保持了原样 - 在必要处添加了中文解释，使得翻译更容易理解 - 保持了句子的技术上下文，使其在编程环境中仍然有意义 这样的翻译既保留了原文的技术含义，又使中文读者能够理解其基本含义.
 让我为您翻译这段关于《Immersive Translate》中的游戏开发内容： 首先在地面上设置，然后我们有一个高度图类型，它将会阻挡移动且不包含树叶.
接下来我们会有一个检查（稍后我会解释），这是 `animal::checkAnimalSpawnRules`，最后一个参数是替换操作.
 这个注册方法是如何工作的呢？显然，第一个参数是你的自定义实体.
然后我们定义它在哪里生成 - 可以是在地面上、在岩浆中、在水中，或者没有限制.
在我们的例子中，我们希望它在地面上生成.
 关于 `motion_blocking_no_leaves`（无树叶移动阻挡），我还不是完全确定.
这是高度图类型，理论上你也可以使用 `WORLD_SURFACE_WG` 或 `WORLD_SURFACE` 或 `motion_blocking`.
而 `motion_blocking_no_leaves` 应该不包括任何树叶，这就是基本思路.
如果有某个阻挡移动的方块状态，它就应该在那里生效.
 你可以随意尝试不同设置，但重要的是它不会在树叶方块上生成，这是一个重要特性.
这里的生成规则也很有趣.
如果我们深入研究，可以看到它忽略了光照要求，因为这是动物，所以这点并不重要.
不过，生成时的亮度必须至少为 8，因为在夜晚新的动物实际上不会生成.
此外，下方的方块必须是允许动物生成的方块.
 如果你想修改这个，你可以简单地创建另一个静态布尔方法，该方法接收一个动物实例、等级访问器、生物生成类型、方块位置和随机源作为参数，理论上你可以创建自己的自定义判定条件.
 替换操作显然会在你对原版实体进行操作时进行替换.
如果你选择 "与" 操作，那么所有条件都必须为真；如果选择 "或" 操作，那么任一条件为真即可.
 然后我们转到 mod 生物群系修改器，这里真的很简单.
我们要添加另一个生物群系修改器的资源键，我们称之为 `spawnGeo`，注册键将被称为 `spawn_gecko_2`.
在引导方法中，它看起来会与我们之前看到的有些不同，但这没问题.
 让我来翻译这段关于生物生成设置的游戏开发文本： 首先注册传入生成 gecko 资源密钥，然后创建一个新的生物群系修改器，类型为生成生物群系修改器.
这里非常重要的是，我们要创建一个直接传入生物群系的 holder set.
在这里我们使用 biomes.getOrThrow() 来指定生物群系，比如说沼泽（swamp）生物群系，然后再用 biomes.getOrThrow() 添加平原（plains）生物群系，因为这些通常比较容易设置.
最后我们创建一个新的 mobSettingSpawnData 列表，传入 mod_entities.gecko.
 注：保留了代码相关的专有名词如 holder set、getOrThrow()、mobSettingSpawnData 等术语的原文，以保持技术准确性.
 让我为您翻译这段关于 Minecraft 模组开发的内容： 使用权重 20、最小数量为 2、最大数量为 4 来设置生成规则，并像往常一样用分号结束.
从下方的代码可以看到，我们的目标是在沼泽和平原这两个生物群系中生成 2 到 4 只壁虎.
生成权重设为 20，这个权重值非常重要 - 您可以增加权重使壁虎更容易生成，但这也会降低其他实体的生成概率.
因此，不要将权重设置得过高，否则其他模组的实体实际上都难以生成.
这就是为什么在设置权重时要相对保守.
 当然，和往常一样，您可以随时调整这些数值进行测试.
让我们运行数据生成器，然后查看生成的 JSON 文件.
文件位于"data/tutorial_mode/neoforge/biome_modifiers/spawn_gecko.json"，您会发现这个 JSON 文件非常简单直观.
理论上，如果您没有使用世界生成或数据生成功能，也可以手动创建这个文件.
 让我们进入游戏看看它们是否能正常生成.
这里应该是一片平原生物群系.
生成可能需要一点时间，因为这里也会生成其他动物.
我们可以看到不同的巨蜥已经成功在平原生物群系中生成了，这证明我们的自定义实体生成系统运作良好.
本教程到此结束，下一期视频我们将添加自定义生物