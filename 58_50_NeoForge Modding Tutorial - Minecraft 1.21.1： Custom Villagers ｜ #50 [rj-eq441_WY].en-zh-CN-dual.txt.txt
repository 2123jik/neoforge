让我为您将这段文本翻译成简体中文： 让我们深入探讨如何为 Minecraft 添加自定义村民.
在下方链接的 121 个 Minecraft 模组开发教程中，涵盖了更多主题，包括可交互实体、自定义实体装备，甚至自定义实体物品栏等众多精彩内容.
在本教程中，我们将为我们的 Minecraft 模组添加一个自定义村民类型，这将是一个"胆小鬼"村民（您很快就会明白为什么叫这个名字，或者您在介绍中已经看到了）.
 自定义村民类型主要包含两个不同的部分：自定义村民职业（即类型）以及兴趣点类型（POI）.
我们将在一个类中实现这两个部分.
此外，我们还需要添加一些标签等内容，但我们会一步一步来.
 在教程模组包中，我们要右键新建一个名为"villager"的包，然后在其中创建一个"ModVillagers"类.
这个类将同时包含 POI 类型和村民职业.
请注意，您当然也可以将它们分开，比如创建一个 ModPOIType 类和一个 ModVillager 类等.
在这个例子中，我们把所有内容放在一起，因为这两部分本来就是相互关联的.
 这需要一个来自 net.minecraft.world.entity.village.POI 的 POIType 类型的 public static final DeferredRegister，命名为 POI_TYPES，并使用 DeferredRegister 进行初始化.
 让我帮你翻译这段文本为简体中文： 创建内置注册表，这将用于兴趣点类型或教程模组 ID，然后创建第二个延迟注册表，这个比较有趣，是用于村民职业的.
我将其命名为"villager_professions"，等同于一个延迟注册表.
创建内置注册表"villager_profession"，这里我们像往常一样再次使用教程模组.
当然，所有代码都可以在下方查看，你可以在那里再次检查.
这不是必需的，因为这里的代码实际上相当简单，但它仍然可供参考.
在 register 方法中，我们要调用 Point_types.register 并传入事件总线参数，我们还要调用 villager_professions.register 同样传入事件总线参数.
然后让我们立即转到教程模组类并注册这个 mod_villagers.
 注：保留了以下专有名词/技术术语的原文： - Point_types - villager_professions - villager_profession - register - mod_villagers 让我为您翻译这段关于《Immersive Translate》的技术文档内容： 在这里调用 register 方法并传入 mod 事件总线，然后我们当然需要注册 PO，包括 PO 类型和村民职业.
首先是 PO 类型，这将是一个 public static final 的 PO 类型持有者.
我们就叫它 CPoy 好了，这其实没什么特别之处.
基本上，我们只是要遍历我们的随机方块，比如可以使用椅子或者 bisou 方块，具体后面再看.
 count PO 将等于 PO 类型的注册.
这里的命名很重要，我们稍后会用到.
第二个参数是一个新 PO 类型的供应器，它已经为我们建议了一个不可变集合（immutable set）.
 【翻译说明】 - 保留了技术术语如：register、mod、PO type、Villager profession、public static final、holder、immutable set 等 - 保持了代码相关的专有名词如：CPoy、bisou block - 确保翻译通顺且符合技术文档的专业性要求 - 翻译长度超过 180 字符 我理解你想要我翻译这段文本为中文.
这段文本看起来是一段口语化的游戏开发或编程相关内容.
以下是我的翻译： 这段非常重要的内容看起来可能会很疯狂，但我马上就会解释.
从 mod 方块开始，然后在这里我们可以直接使用一个方块，让我们就用椅子方块吧，为什么不呢.
chair（椅子）或者任何你选择的方块.
获取.
获取状态定义.
 注：我保留了一些专业术语如"mod"、"chair"的原文，因为这些是编程或游戏开发中的常用术语.
这段文本的语法结构比较松散，我在翻译时尽量保持了原文的口语化风格，同时确保中文表达通顺易懂.
 这段文本主要讨论了游戏（可能是 Minecraft）中的方块状态和村民职业系统的技术细节.
以下是翻译： 获取可能的状态，在第二个右括号后面加上逗号 1 和 1，这样就完成了.
让我来解释一下：POI 类型基本上需要一个方块，但不仅仅需要方块，还需要方块及其所有可能的状态.
椅子是一个很好的例子，因为当你有一个状态定义（基本上指的是方块状态）时，椅子可以有四种不同的方块状态，这是因为它是一个水平方向的方块，其方块状态可以根据朝向属性改变，该属性可以取四个不同的值.
这就是为什么我们需要获取所有这些值，并将它们都放入这里的不可变集合中.
 请注意，你确实可以在这里使用原版方块.
但要注意，如果你想制作一个养蜂人村民，你不能直接使用蜂巢之类的方块，因为这行不通，原因是它已经是一个 POI 类型了.
如果我有第二个 POI 类型，我会将其称为"C POI 类型 2"，你不能重复使用相同的方块.
一个方块永远只能作为一种兴趣点.
 你可以在 point_types 类中查看这些内容.
按两次 shift 键，然后选择 point_types（包括非项目项），在这个类中你可以看到不同的内容.
往下滚动，你会看到蜂箱和蜂巢，它们从蜂箱和蜂巢方块获取方块状态，这就是为什么你实际上无法为其创建一个 POI 类型来制作养蜂人村民.
这是一个非常重要的点，因为很多人都会遇到这个问题，他们想添加养蜂人村民.
 第二点是，将有一个 public static final 的村民职业持有者（不是村民，而是村民职业），它将是名为 cower 的村民职业.
 让我将这段文本翻译成简体中文.
由于这段文本涉及编程相关内容，我会保留必要的技术术语： 这里要注册的是 cower，确保我们正确写入这个 CER.
然后这是一个 supplier，作为新的村民职业的第二个参数，再次传入名称 Center.
接着我们需要一个 holder，然后使用与 supplier 相同的箭头，表示 holder.value 等于 count po.value.
这里顺便说明一下，这是赋值运算符，是一个非常重要的比较运算符.
第三个参数我们可以称之为 holder 或 po type holder，这个命名并不是很重要，但在这里我们需要再次调用 po type holder.val，使用等号运算符 C.V Val，然后是一个保持为空的 immutable set.of，以及另一个同样保持为空的 immutable set.of.
在这些设置之后，最后我们想要的是一个音效，我们将使用 mod sounds，让我们使用 magic block hit 音效.
 让我为您将这段文本翻译成简体中文： 这将是当村民承担中心职业时播放的声音.
这里的前两个参数或三个参数是谓词，这些基本上是确定这个特定村民的 POI 类型，正如你在这里看到的，它表现为一个谓词.
因此，你需要一个持有者，然后判断如果持有者是 count POI，那么我们就能够获得这个特定的职业.
 你也可以查看 Village Professions 类，我很确定应该是这个 - 它可能也叫做 villagers，实际上可能就是 Villager profession 本身，这就是它们被定义的地方.
你可以看到这里的其他内容是请求的物品，在我们的工人案例中，我们没有请求的物品，我们也没有次要的 POI.
如果你有次要 POI，那么村民就会从一个兴趣点移动到另一个兴趣点来工作，这是一个粗略的估计.
 你也可以在 Villager profession 类中查看所有原版村民的不同数值.
现在我们已经完成了这些，基本上快要完成了.
我们已经有了 POI，有了村民，这些都已注册，现在我们需要转到 assets 目录，从翻译开始添加其余内容，翻译是这样的：entity.
 我理解您想要将"minecraft. villager tutorial mode"翻译成中文.
作为一个专业的翻译引擎，我的翻译如下： 我的世界（Minecraft）村民教程模式.
 补充说明： - "Minecraft"作为游戏名称，我保留了英文但同时给出了中文常用译名"我的世界" - "villager"在 Minecraft 游戏中特指"村民"这个游戏元素 - "tutorial mode"翻译为"教程模式"，这是游戏中常见的一种模式类型 这样的翻译既保留了必要的专有名词，又确保了中文表达的准确性和自然度.
如果您需要调整或者有其他翻译要求，我很乐意为您进一步优化.
 让我将这段文本翻译成简体中文： 当你打开物品栏时，如果没有正确设置，显示的内容会不正确.
我们需要正确地翻译它.
接下来我们需要添加材质，这个材质将放在 tutorial mod 的 textures/entity 目录下.
在 entity 目录中，我们需要新建一个叫做 villager 的文件夹，然后在其中再创建一个名为 profession 的子文件夹（确保拼写正确）.
在这里我们需要放置 center.png 文件，这个文件你也可以下载获得.
请确保 PNG 文件的名称与你注册的村民职业名称完全匹配，并且必须放在 textures/entity/villager/profession 路径下.
 最后一点非常重要，这里很容易出现拼写错误：我们需要进入 resources/data/minecraft/tags 目录.
这一步极其重要，最好去查看 GitHub 仓库来确认拼写，因为在这里很容易拼错.
在 data/minecraft/tags 目录下，我们需要创建 point_of_interest_type（注意是 type 而不是 types）.
确保这个路径名完全正确，然后在其中创建一个新的 JSON 文件，这将是 acquirable_job_site 文件.
 让我为您翻译这段文本： Json 监听这里很容易出现输入错误，请仔细检查.
在其中，我们将包含以下内容：Place 设为 false，这是一个普通标签，但这里的值将是 tutorial_mod:cenor_po，请确保这里的名称与这里给出的名称完全匹配.
就像我说的，在这里很容易出错，我已经见过各种各样的问题了：兴趣点类型有拼写错误、Json 文件有拼写错误、Json 文件内容有错误、文件夹放在 tutorial_mod 文件夹内而不是 data/minecraft/tags 文件夹等等各种不同的情况.
如果它不工作，那显然某处一定有拼写错误.
我知道有时很难找到，听着，在 Minecraft 模组开发中，我可能犯过的拼写错误比你能想象的还要多，我是认真的，这真是疯狂.
 但这就是关于交易的基本设置.
在这种情况下，我们现在不会添加交易，我们会在下一个教程中添加交易.
现在我只想添加村民，这就是我们所需要的全部内容.
让我们进入游戏看看是否有效.
 回到 Minecraft，让我们放下一把椅子，在旁边放一个村民，理论上他会走过去.
让我们看看...也许，也许你想去椅子那里，我的朋友？是的，他去了！出于某种原因，这里的入口显然比...更有趣，我不知道为什么，但就是这样.
如果我再放几个，你可以看到他们都变成了我（虽然我现在没有皮肤）.
哦不，发生了什么？这么多胆小鬼！我们该怎么办？当然，如果我右键点击他们，你可以看到他们现在还没有任何交易，但这就是我们下一个教程要做的事情.
 目前为止，自定义村民已添加到 Minecraft 中，太棒了！就是这样，像往常一样，所有代码都可以在下面找到，但这就是这个教程的全部内容了.
下次的视频内容就像我说的，是关于自定义村民交易的内容，希望到时候能见到你！