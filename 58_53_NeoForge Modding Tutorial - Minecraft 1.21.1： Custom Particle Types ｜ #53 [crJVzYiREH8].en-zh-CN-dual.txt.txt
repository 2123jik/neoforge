让我帮你翻译这段关于 Minecraft 模组开发的文本.
由于内容较长，我会保持专业术语不变，同时确保翻译准确流畅： 让我们深入探讨一下在 Minecraft 模组开发中创建自定义粒子效果.
在 121 模组开发课程中，我们会涉及可变实体、可驯服实体、自定义实体装备，甚至自定义实体物品栏等众多精彩主题.
在本教程中，我们将创建自定义传送门效果.
 上次课程中，我们学习了如何通过服务器层级（server level）生成传送门.
这次我们不仅要创建自定义传送门类型，还要通过客户端来生成它们，使其仅在客户端显示.
具体来说，当你右键点击魔法方块时，除了播放当前的音效外，还会让游戏世界通过客户端生成粒子效果.
这与发送粒子的方式略有不同，我们稍后会详细介绍.
 首先，在 cro tutorial mod 包中，我们需要创建一个名为 particle 的新包，并在其中创建两个 Java 类：mod particles 类和特定的粒子类.
在这个例子中，我们将创建 bismo particles.
这只是一个示例，我们会使用相同的材质，但会放在不同的文件夹中.
 [由于文本较长，我将继续翻译剩余部分] 我们将使用这个材质并将其显示为粒子效果.
理论上，如果我们使用物品类型（item type）就已经能实现这一点.
就像在 Chisel item 中看到的那样，有 block particle 选项和 item particle 选项.
虽然理论上我们已经可以实现这个效果，但为了演示目的，我们将使用 bismo particle.
你可以使用任何想要的材质，接下来我们将逐步完成所有步骤.
 [继续详细介绍代码实现细节...] 这段代码展示了如何创建和注册自定义粒子效果，包括设置粒子的生命周期、颜色、渲染类型等属性.
通过查看原版游戏中的例子（如暴击粒子效果）可以学习更多有趣的实现方式.
最好的学习方法就是多尝试，多观察原版游戏的实现.
 让我为这段文本提供中文翻译： 这将用于内置注册表 Registries 的粒子类型，当然还有教程模组.
和往常一样，使用延迟注册器（deferred register）设置 ID，并创建一个带有 IEventBus 参数的公共静态 void register 方法，然后我们要调用 particle types 的 register 事件总线.
像往常一样，我再重复一遍，所有代码都可以在下方找到.
然后当然，当我们完成这些后，我们需要在教程模组的构造函数中调用 register 方法，这一点非常重要.
所以 mod particles、particles、particles 就在那里，注册时传入 mod 事件总线，然后我们就可以正确地注册这个了.
这个过程也很直接，使用 public static final，这将是一个 simple particle type 的供应器（supplier），它将成为 bismore particles，等于 particle types.
 让我将这段文本翻译为简体中文.
由于这是关于《Immersive Translate》的游戏开发/模组制作相关内容，我会保留必要的技术术语.
 在此处注册名称"bismore particles"，正确书写这一点非常重要.
然后是新建一个简单粒子类型的供应器.
接着我们可以在这里设置一个布尔值来覆盖限制器，我认为这样可以确保它们始终显示.
另外，当启用最小粒子选项时，显示数量也会受到影响，我相信它们会一直显示.
你也可以随意调试这个设置，这永远是个好主意.
 在我们生成它们之前，还需要完成几件事.
首先是注册粒子（ptical）或者说粒子工厂（ptical factories）.
为此，我们要在教程模组类中的客户端模式事件部分创建一个新的事件方法.
这将是一个公共静态 void 方法，名为"register ptical factories"，需要一个"register particle providers event"参数（这名字真够长的）.
 当然，和往常一样，别忘了添加@Subscribe 事件注解，这一点极其重要.
它必须是客户端模式事件中的 public static void 方法.
完成后，这个事件就很直观了.
 让我来翻译这段关于游戏粒子效果注册的描述： 注册 Sprite 集用于模组粒子效果，具体是铋粒子效果.
获取并传入 Bismuth 粒子提供器（provider）进行构造，这样就完成了工厂的注册，现在我们就可以生成这些粒子了.
但是这些粒子具体看起来是什么样的呢？我们还没有在任何地方定义过.
这需要通过资源文件来定义.
在 resources/assets/tutorial/mod 目录下，我们要创建一个新的文件夹，这个文件夹的名字非常重要 - particles（注意末尾有个 s）.
在这个文件夹内，我们创建一个新文件，命名为 bismuth_portal（铋传送门）.
 让我为您翻译这段关于《Immersive Translate》的游戏开发文本： Json 和其内容非常简单，基本上就是一个材质列表，它指向 tutorial_mod:bismuth.
这里非常重要的是，json 文件的名称必须与我们在这里给出的粒子类型名称完全匹配.
那么这个路径指向哪里呢？它指向 textures 新目录下名为 particle 的材质.
注意，在 tutorial mod 文件夹中，包含 Json 文件的文件夹叫做"particles"（复数），而在 tutorial_mod/textures 中的文件夹却要叫"particle"（单数）.
我知道这听起来很荒谬，但必须严格按照这种方式书写.
在这里很容易出现拼写错误，比如一个写成 particle 另一个写成 particles，或者混用这些名称，但必须严格遵循这种结构.
 接下来，我们要使用 Bismuth.png.
你也可以直接从物品栏中获取这个材质，这样做没问题.
这里我们有 bismuth.png，显然就是指这个文件.
关键是材质的名称必须与 Json 文件中给出的名称相匹配，这就是它所指向的内容，就这么简单.
 现在我们可以实际生成我们的粒子了.
我们将在两个地方进行操作，基本上就是在 Chisel 中复制相同的内容，然后尽情发挥.
所以让我们复制或复制 dolphin，然后把 particle type 从 dolphin 改成 portal.
 让我帮你翻译这段文本为简体中文： bismo 传送门.
获取后只需说明速度可能会稍微降低一些，这里大概降低 0.5 就可以了，这样就没问题了，同时这也会产生一个 bisou 粒子效果.
正如我所说，我们还将通过客户端（而不是服务器）生成这些粒子.
这将在魔法方块中实现，也就是在自定义魔法方块中.
在这里，操作非常直接，我们只需要写 level.addParticle(ModParticles.BISMO_PARTICLES.get())，然后我们需要设置位置：getX() + 0.5、getY() + 1.0 以及 position.
 让我为您翻译这段关于 Minecraft 模组开发中粒子效果实现的内容： 再次获取 Z 或 Z 加 0.5，这是因为方块的实际位置总是在方块的右下角，为了使其在方块内居中.
在其上方，我们需要将 Y 设为 1，X 和 Z 设为 0.5.
然后我们定义速度，让它向上移动.
通过这种方式，粒子会以 1 的速度向上移动.
 这与 S 型粒子的工作方式有所不同，S 型粒子除了定义位置外还需要设置数量，而这里是速度的偏移，这很有趣.
实现方式略有不同，但基本思路就是这样.
完成这些后，我们就添加了自定义粒子效果，它们会在我们右键点击魔法方块时产生，也会在使用凿子工具时出现.
 让我们进入游戏看看效果.
回到 Minecraft 中，让我们用凿子处理这个方块，你可以看到粒子效果出现了.
由于我们将粒子的生命周期设置为 80 刻（约 4 秒），它们会在原地停留相当长的时间.
看，效果也在这里生效了，这太酷了！粒子就会在这里产生，非常漂亮.
 正如我所说，你可以用任何想要的材质替换现有的材质，不一定要使用物品材质.
好了，这就是如何为 Minecraft 添加自定义粒子效果.
代码已经在下方提供给大家了.
本教程到此结束，下一期视频我们将修改一些原版的战利品表