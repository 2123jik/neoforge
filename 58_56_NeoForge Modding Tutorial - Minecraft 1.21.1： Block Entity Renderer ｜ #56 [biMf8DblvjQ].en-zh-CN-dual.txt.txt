让我为这段文本提供中文翻译： 让我们为基础方块实体添加一个方块实体渲染器.
在 121 个 Minecraft 模组开发课程中还有更多主题可供学习，包括方块实体的能量和流体处理等众多精彩内容.
在本教程中，我们将为基座方块实体添加一个方块实体渲染器.
上次我们添加了基础方块实体，也就是基座，我们可以通过右键点击向其中添加一个物品到这里的物品栏中，我们也能取出物品.
然而，这些操作只伴随着简单的声音，没有任何视觉效果.
视觉效果是很重要的，这就是为什么我们要添加一个方块实体渲染器.
 简单来说，方块实体渲染器允许你为方块实体渲染一些东西，这从它的名字就能看出来.
让我们在方块实体包中右键新建一个名为 renderer 的包，然后在其中创建 PedestalBlockEntityRenderer 类.
这个类将实现 BlockEntityRenderer 接口，类型参数是 PedestalBlockEntity.
我们将悬停在这上面来实现 render 方法，然后创建一个构造函数，看看我们需要什么.
构造函数将是 public PedestalBlockEntityRenderer，构造函数参数是 BlockEntityRendererProvider.
 让我将这段文本翻译为简体中文： 这里的上下文称为 context，我们不需要对它做任何处理，这样就可以了.
现在看 render 方法，我会复制其内容，然后我们来看看需要什么.
首先，在 block entity 中我们会缺少一个方法，稍后我们需要添加到 block entity 中，但你会发现我们会解释所有内容，然后再看具体情况.
 首先，在 render 方法中，我想重命名几个参数，因为我不太喜欢它们的命名方式.
这里的"v"实际上是"partialTick"，我认为这只是因为我运行的 parchment 版本的原因.
在新版本中这个问题已经解决，或者说它有了不同的命名.
"buffer"是 source，然后这里的"i"是"packedLight"，"i1"是"packedOverlay"，这样命名会更清晰一些.
 接下来我们要复制这些内容，这里会出现两个错误，但我会修复它们并解释其余部分.
这里是"poseStack"而不是"postStack"（这很有趣）.
第一个是"getLightLevel"方法，我们实际上可以直接在 BlockEntityRenderer 类中创建它，从最高层面来看，它只是计算我们的光照等级，这样我们显示的内容就能正确显示.
 然后你可以看到从 BlockEntity 本身获取渲染旋转的部分.
为此，我们需要回到我们的 block entity 中添加这个.
这非常简单，我们只需添加一个名为 rotation 的私有 float 变量，然后添加 getRenderingRotation 方法.
这个想法很简单：我希望基座顶部显示的物品能够旋转一下，这就是这个方法的作用.
基本上，我们有一个 rotation 变量，每次调用 getRenderingRotation 方法时，我们将这个 rotation 增加 0.5，如果达到 360 或更多，就重置为零，这样它就会持续旋转.
 在 render 方法中，我们可以一步步来看.
我们有一个物品渲染器，我们从 Minecraft 客户端获取它，然后说我们要渲染的堆栈来自物品栏的第零个槽位.
然后我们推送到 poseStack，最基本的想法是我们说要渲染某些东西，我们可以平移它的位置，改变它的比例，然后这里的 mulPose 是旋转它.
 当你旋转某物时，你需要一个四元数.
这涉及一些较高级的数学知识.
简单来说，当你进行旋转时，你不能只用三个维度（X、Y、Z 旋转），你实际上需要一个四维数字，称为四元数.
这里的基本概念是你选择一个要绕其旋转的轴，在这个例子中我们要绕正 Y 轴旋转，然后我们可以输入想要旋转的度数，这就是为什么我们的 renderingRotation 从 0 到 360，因为这就是一个完整的圆.
 如你所见，我们使用物品渲染器来渲染堆栈，最后我们弹出 poseStack，基本上意味着我们现在要渲染我们定义的所有内容.
我强烈建议你多尝试，让它先能工作，然后尝试修改这些数值，看看会发生什么.
比如说，你想绕负 X 轴旋转，就改变这些数字，多玩玩看.
你可以看到 poseStack 上可以调用的方法不是很多，你可以绕某物旋转，这显然更复杂一些，否则你基本上就只有平移和缩放.
当然，你也可以改变一些缩放参数之类的，强烈建议你尝试一下，看看能搞出什么花样来.
 当你有了一个 block entity 渲染器，你当然还需要以某种方式将它连接到 block entity 本身.
实现这一点的方法是在教程 mod 类中，在我们的 client mod events 部分的最下方，我们要有一个新方法，它将是一个静态 void 方法 register BER，这将是 entity renderers 事件.
 让我为您翻译这段文本： 当然在这里注册渲染器事件，按照惯例它需要添加订阅事件注解（这一点非常重要），然后在这里我们要说的是事件注册块实体渲染器，传入模组方块实体.
 为了确保翻译的专业性和完整性，我补充说明： - "register renderers event" 是指注册渲染器事件的过程 - "ad subscribe event annotation" 指的是添加事件订阅注解 - "block entity renderers" 特指方块实体渲染器 - 保持了技术术语的准确性，同时使译文通顺易懂 - 考虑到游戏开发上下文，选用了符合中文语境的专业术语 这样的翻译既保留了原文的技术含量，又符合中文的表达习惯.
 让我为这段文本提供中文翻译： 基座是 doget，然后第二个参数是基座方块实体渲染器（pedestal block entity renderer）的新实例，它将基座方块实体与基座方块实体渲染器结合在一起，并将所有这些一起注册.
很神奇，这应该就是让基座在视觉上看起来绝对令人惊艳所需的一切.
让我们重启游戏看看是否有效.
好的，回到 Minecraft，你看看这个，这太酷了！我们现在基本上可以随心所欲地操作，我们可以移除物品，可以把它们放进去，甚至可以把基座放在基座里面，这有点像基座套娃，但是没错，你可以看到我可以在这里放任何我想放的物品，它都能正常工作.
仅仅是有了这个显示功能，就让基座增色不少，这真是令人难以置信，对吧？这种效果太棒了.
这就是添加到基础方块实体的基本方块实体渲染器.
像往常一样，所有代码都可以在描述中的仓库链接里找到.
这就是本教程的全部内容了.
下一个视频中，我们将为这个方块实体添加菜单和界面，希望到时候能见到你